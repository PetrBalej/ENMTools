setwd("~/GitHub/ENMTools Test Code and Junk/")

library(ENMTools)

env.files <- list.files(path = "test/testdata/", pattern = "pc", full.names = TRUE)
env <- stack(env.files)
names(env) <- c("layer.1", "layer.2", "layer.3", "layer.4")
env <- setMinMax(env)

ahli <- enmtools.species()
ahli
ahli$species.name <- "ahli"
ahli$presence.points <- read.csv("test/testdata/ahli.csv")[,3:4]
ahli$range <- background.raster.buffer(ahli$presence.points, 50000, mask = env)
ahli$background.points <- background.points.buffer(points = ahli$presence.points,
                                                   radius = 20000, n = 1000, mask = env[[1]])

ahli

ahli.mx <- enmtools.maxent(ahli, env)


allogus <- enmtools.species(species.name = "allogus",
                            presence.points = read.csv("test/testdata/allogus.csv")[,3:4])

allogus$range <- background.raster.buffer(allogus$presence.points, 50000, mask = env)
allogus$background.points <- background.points.buffer(points = allogus$presence.points,
                                                      radius = 20000, n = 1000, mask = env[[1]])

allogus

ahli.ppm <- enmtools.ppmlasso(ahli, env, test.prop = 0.2, back.accurate = TRUE, normalise = TRUE)
ahli.ppm


allogus.bc <- enmtools.bc(allogus, env, test.prop = 0.2)
allogus.bc

allogus.dm <- enmtools.dm(allogus, env, test.prop = 0.2)
allogus.dm

allogus.gam <- enmtools.gam(allogus, env, test.prop = 0.2)
allogus.gam
visualize.enm(allogus.gam, env[[1:2]])

allogus.glm <- enmtools.glm(allogus, env, test.prop = 0.2)
allogus.glm

allogus.maxent <- enmtools.maxent(allogus, env, test.prop = 0.2)
allogus.maxent

allogus.rf <- enmtools.rf(allogus, env, test.prop = 0.2)
allogus.rf

allogus.ppm <- enmtools.ppmlasso(allogus, env, test.prop = 0.2, normalise = TRUE)
allogus.ppm




visualize.enm(allogus.ppm, env, layers = names(env)[1:2])

esp.bg.sym <- enmtools.ecospat.bg(ahli, allogus, env[[c("layer.1", "layer.3")]], test.type = "symmetric")

esp.id <- enmtools.ecospat.id(ahli, allogus, env[[c("layer.1", "layer.2")]])




library(rgbif)

hisp.anoles <- read.nexus(file = "test/testdata/StarBEAST_MCC.species.txt")

keepers <- c("brevirostris", "marron", "caudalis", "websteri", "distichus")

hisp.anoles <- drop.tip(phy = hisp.anoles, tip = hisp.anoles$tip.label[!hisp.anoles$tip.label %in% keepers])
plot(hisp.anoles)

hisp.env <- stack(list.files("test/testdata/Hispaniola_Worldclim", full.names = TRUE))
hisp.env <- setMinMax(hisp.env)

species.from.gbif <- function(genus, species, name = NA, env){

  # Name it after the species epithet unless told otherwise
  if(is.na(name)){
    name <- species
  }

  # Get GBIF data
  this.sp <- enmtools.species(presence.points = gbif(genus = genus, species = species)[,c("lon", "lat")],
                              species.name = name)

  # Rename columns, get rid of duds
  colnames(this.sp$presence.points) <- c("Longitude", "Latitude")
  this.sp$presence.points <- this.sp$presence.points[complete.cases(extract(env, this.sp$presence.points)),]
  this.sp$presence.points <- this.sp$presence.points[!duplicated(this.sp$presence.points),]

  this.sp$range <- background.raster.buffer(this.sp$presence.points, 50000, mask = hisp.env)

  return(this.sp)
}


brevirostris <- species.from.gbif(genus = "Anolis", species = "brevirostris", env = hisp.env)
marron <- species.from.gbif(genus = "Anolis", species = "marron", env = hisp.env)
caudalis <- species.from.gbif(genus = "Anolis", species = "caudalis", env = hisp.env)
websteri <- species.from.gbif(genus = "Anolis", species = "websteri", env = hisp.env)
distichus <- species.from.gbif(genus = "Anolis", species = "distichus", env = hisp.env)


brev.clade <- enmtools.clade(species = list(brevirostris, marron, caudalis, websteri, distichus), tree = hisp.anoles)
check.clade(brev.clade)

hisp.env <- hisp.env[[c(1,9)]]

brev.model <- enmtools.gam(brevirostris, hisp.env)
mar.model <- enmtools.gam(marron, hisp.env)
caud.model <- enmtools.gam(caudalis, hisp.env)
web.model <- enmtools.gam(websteri, hisp.env)
dis.model <- enmtools.gam(distichus, hisp.env)

models <- list(brev = brev.model, mar = mar.model, caud = caud.model,
               web = web.model, dis = dis.model)

cor.geog <- sapply(models, function(x) raster.overlap(x, models[[1]])$rank.cor)
for(i in 2:length(models)){
   cor.geog <- rbind(cor.geog,
                         sapply(models, function(x) raster.overlap(x, models[[i]])$rank.cor))
}
row.names(cor.geog) <- names(models)


cor.env <- sapply(models, function(x) env.overlap(x, models[[1]], hisp.env)$env.cor)
for(i in 2:length(models)){
  cor.env <- rbind(cor.env,
                    sapply(models, function(x) env.overlap(x, models[[i]], hisp.env)$env.cor))
}
row.names(cor.env) <- names(models)

library(ggplot2)

qplot(cor.geog[upper.tri(cor.geog)], cor.env[upper.tri(cor.env)])

plot(mar.model)
plot(dis.model)
visualize.enm(mar.model, hisp.env, layers = c("snv_1", "snv_17"))
visualize.enm(dis.model, hisp.env, layers = c("snv_1", "snv_17"))
