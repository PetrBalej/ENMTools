{
    "collab_server" : "",
    "contents" : "#' Takes an emtools.species object with presence and background points, and builds a GLM\n#'\n#' @param formula Standard GLM formula\n#' @param species An enmtools.species object\n#' @param env A raster or raster stack of environmental data.\n#' @param test.prop Proportion of data to withhold for model evaluation\n#' @param eval Determines whether model evaluation should be done.  Turned on by default, but moses turns it off to speed things up.\n#' @param nback Number of background points to draw from range or env, if background points aren't provided\n#' @param report Optional name of an html file for generating reports\n#' @param overwrite TRUE/FALSE whether to overwrite a report file if it already exists\n#' @param ... Arguments to be passed to glm()\n#'\n#' @export enmtools.glm\n#' @export print.enmtools.glm\n#' @export summary.enmtools.glm\n#' @export plot.enmtools.glm\n\n\nenmtools.glm <- function(species, env, f = NULL, test.prop = 0, eval = TRUE, nback = 1000, report = NULL, overwrite = FALSE, weights = \"equal\", ...){\n\n  notes <- NULL\n\n  species <- check.bg(species, env, nback = nback)\n\n  # Builds a default formula using all env\n  if(is.null(f)){\n    f <- as.formula(paste(\"presence\", paste(c(names(env)), collapse = \" + \"), sep = \" ~ \"))\n    notes <- c(notes, \"No formula was provided, so a GLM formula was built automatically.\")\n  }\n\n  glm.precheck(f, species, env)\n\n  # Declaring some NAs in case we skip evaluation\n  test.data <- NA\n  model.evaluation <- NA\n  env.model.evaluation <- NA\n  test.evaluation <- NA\n  env.test.evaluation <- NA\n\n  if(test.prop > 0 & test.prop < 1){\n    test.inds <- sample(1:nrow(species$presence.points), ceiling(nrow(species$presence.points) * test.prop))\n    test.data <- species$presence.points[test.inds,]\n    species$presence.points <- species$presence.points[-test.inds,]\n  }\n\n  ### Add env data\n  species <- add.env(species, env)\n\n  # Recast this formula so that the response variable is named \"presence\"\n  # regardless of what was passed.\n  f <- reformulate(attr(delete.response(terms(f)), \"term.labels\"), response = \"presence\")\n\n  analysis.df <- rbind(species$presence.points, species$background.points)\n\n\n  if(weights == \"equal\"){\n    weights <- c(rep(1, nrow(species$presence.points)),\n                 rep(nrow(species$presence.points)/nrow(species$background.points),\n                     nrow(species$background.points)))\n  } else {\n    weights <- rep(1, nrow(species$presence.points) + nrow(species$background.points))\n  }\n\n  analysis.df$presence <- c(rep(1, nrow(species$presence.points)), rep(0, nrow(species$background.points)))\n\n  this.glm <- glm(f, analysis.df[,-c(1,2)], family=\"binomial\", weights = weights, ...)\n\n\n  if(as.integer(this.glm$aic) == 2 * length(this.glm$coefficients)){\n    notes <- c(notes, \"AIC is 2x number of coefficients, indicating an uninformative model.  This often indicates that you have too many predictors for your number of data points.\")\n  }\n\n  suitability <- predict(env, this.glm, type = \"response\")\n\n  if(eval == TRUE){\n\n    # This is a very weird hack that has to be done because dismo's evaluate function\n    # fails if the stack only has one layer.\n    if(length(names(env)) == 1){\n      oldname <- names(env)\n      env <- stack(env, env)\n      names(env) <- c(oldname, \"dummyvar\")\n      notes <- c(notes, \"Only one predictor was provided, so a dummy variable was created in order to be compatible with dismo's prediction function.\")\n    }\n\n    model.evaluation <-dismo::evaluate(species$presence.points[,1:2], species$background.points[,1:2],\n                                 this.glm, env)\n    env.model.evaluation <- env.evaluate(species, this.glm, env)\n\n    if(test.prop > 0 & test.prop < 1){\n      test.evaluation <-dismo::evaluate(test.data, species$background.points[,1:2],\n                                  this.glm, env)\n      temp.sp <- species\n      temp.sp$presence.points <- test.data\n      env.test.evaluation <- env.evaluate(temp.sp, this.glm, env)\n    }\n\n  }\n\n  output <- list(species.name = species$species.name,\n                 formula = f,\n                 analysis.df = analysis.df,\n                 test.data = test.data,\n                 test.prop = test.prop,\n                 model = this.glm,\n                 training.evaluation = model.evaluation,\n                 test.evaluation = test.evaluation,\n                 env.training.evaluation = env.model.evaluation,\n                 env.test.evaluation = env.test.evaluation,\n                 suitability = suitability,\n                 notes = notes)\n\n  class(output) <- c(\"enmtools.glm\", \"enmtools.model\")\n\n  # Doing response plots for each variable.  Doing this bit after creating\n  # the output object because plot.response expects an enmtools.model object\n  response.plots <- list()\n\n  for(i in names(env)){\n    response.plots[[i]] <- plot.response(output, env, i)\n  }\n\n  output[[\"response.plots\"]] <- response.plots\n\n  if(!is.null(report)){\n    if(file.exists(report) & overwrite == FALSE){\n      stop(\"Report file exists, and overwrite is set to FALSE!\")\n    } else {\n      cat(\"\\n\\nGenerating html report...\\n\")\n      makereport(output, outfile = report)\n    }\n  }\n\n  return(output)\n\n}\n\n# Summary for objects of class enmtools.glm\nsummary.enmtools.glm <- function(this.glm){\n\n  cat(\"\\n\\nFormula:  \")\n  print(this.glm$formula)\n\n  cat(\"\\n\\nData table (top ten lines): \")\n  print(kable(head(this.glm$analysis.df, 10)))\n\n  cat(\"\\n\\nModel:  \")\n  print(summary(this.glm$model))\n\n  cat(\"\\n\\nModel fit (training data):  \")\n  print(this.glm$training.evaluation)\n\n  cat(\"\\n\\nEnvironment space model fit (training data):  \")\n  print(this.glm$env.training.evaluation)\n\n  cat(\"\\n\\nProportion of data wittheld for model fitting:  \")\n  cat(this.glm$test.prop)\n\n  cat(\"\\n\\nModel fit (test data):  \")\n  print(this.glm$test.evaluation)\n\n  cat(\"\\n\\nEnvironment space model fit (test data):  \")\n  print(this.glm$env.test.evaluation)\n\n  cat(\"\\n\\nSuitability:  \\n\")\n  print(this.glm$suitability)\n\n  cat(\"\\n\\nNotes:  \\n\")\n  this.glm$notes\n\n  plot(this.glm)\n\n}\n\n# Print method for objects of class enmtools.glm\nprint.enmtools.glm <- function(this.glm){\n\n  print(summary(this.glm))\n\n}\n\n\n# Plot method for objects of class enmtools.glm\nplot.enmtools.glm <- function(this.glm){\n\n\n  suit.points <- data.frame(rasterToPoints(this.glm$suitability))\n  colnames(suit.points) <- c(\"Longitude\", \"Latitude\", \"Suitability\")\n\n  suit.plot <- ggplot(data = suit.points, aes(y = Latitude, x = Longitude)) +\n    geom_raster(aes(fill = Suitability)) +\n    scale_fill_viridis(option = \"B\", guide = guide_colourbar(title = \"Suitability\")) +\n    coord_fixed() + theme_classic() +\n    geom_point(data = this.glm$analysis.df[this.glm$analysis.df$presence == 1,], aes(x = Longitude, y = Latitude),\n               pch = 21, fill = \"white\", color = \"black\", size = 2)\n\n  if(!(all(is.na(this.glm$test.data)))){\n    suit.plot <- suit.plot + geom_point(data = this.glm$test.data, aes(x = Longitude, y = Latitude),\n                                        pch = 21, fill = \"green\", color = \"black\", size = 2)\n  }\n\n  return(suit.plot)\n\n}\n\n# Function for checking data prior to running enmtools.glm\nglm.precheck <- function(f, species, env){\n\n  # Check to see if the function is the right class\n  if(!inherits(f, \"formula\")){\n    stop(\"Argument \\'formula\\' must contain an R formula object!\")\n  }\n\n  ### Check to make sure the data we need is there\n  if(!inherits(species, \"enmtools.species\")){\n    stop(\"Argument \\'species\\' must contain an enmtools.species object!\")\n  }\n\n  check.species(species)\n\n  if(!inherits(species$presence.points, \"data.frame\")){\n    stop(\"Species presence.points do not appear to be an object of class data.frame\")\n  }\n\n  if(!inherits(species$background.points, \"data.frame\")){\n    stop(\"Species background.points do not appear to be an object of class data.frame\")\n  }\n\n  if(!inherits(env, c(\"raster\", \"RasterLayer\", \"RasterStack\", \"RasterBrick\"))){\n    stop(\"No environmental rasters were supplied!\")\n  }\n\n  if(ncol(species$presence.points) != 2){\n    stop(\"Species presence points do not contain longitude and latitude data!\")\n  }\n\n  if(ncol(species$background.points) != 2){\n    stop(\"Species background points do not contain longitude and latitude data!\")\n  }\n}\n\n",
    "created" : 1494273779952.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4154057214",
    "id" : "A944B1B7",
    "lastKnownWriteTime" : 1494305678,
    "last_content_update" : 1494305678,
    "path" : "~/GitHub/ENMTools/R/enmtools.glm.R",
    "project_path" : "R/enmtools.glm.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}